fastlane_version "2.108.0"
default_platform :android

# Android
platform :android do
  before_all do
    ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
    ENV["KOLIBRI_URL"] = "https://kolibri.herokuapp.com"
    ENV["KOLIBRI_PROJECT"] = "<%= app.internal_id %>"
    ENV["CRYPTEX_GIT_BRANCH"] = "<%= app.android_config['publishing_profile'] || 'master' %>"
  end

  desc "Kolibri Pipeline (build, test and publish)"
  lane :all do

    kolibri(
      stage: "initialize",
      message: "Setup configuration and credentials before we go...",
    )

    cryptex(
      type: "export",
      out: "app/keystore.jks",
      key: "android_keystore",
      verbose: true
    )

    cryptex(
      type: "export",
      out: "google-play-console.json",
      key: "android_google_play",
      verbose: true
    )

    cryptex(
      type: "export_env",
      key: "android_keystore",
      set_env: true,
      verbose: true
    )

    build
    test
    publish
  end

  desc "Runs all the tests"
  lane :test do
    kolibri(
      stage: "test",
      message: "Running all the tests..."
    )

    gradle(task: "test")

    kolibri(
      stage: "test",
      message: "All tests passed.",
      code: 1
    )
  end

  desc "Build the project"
  lane :build do

    kolibri(
      stage: "build",
      message: "Building project..."
    )

    gradle(task: "assembleRelease", flags: "-q")

    kolibri(
      stage: "build",
      message: "Build successful",
      code: 1
    )
  end

  desc "Publish the app"
  lane :publish do

    <% if channels.include? 'fabric' %>

    kolibri(
      stage: "publish",
      message: "Publishing app to Fabric...",
    )

    crashlytics(
       api_token: "5b0e4ca8fe72e1ad97ccbd82e18f18ba4cacd219",
       build_secret: "8f94e66fae0366a48a613623166a2586ae77e7fab1b68d021471e0036ba46ad8"
    )

    kolibri(
      stage: "publish",
      message: "Successfully published to Fabric",
      code: 1
    )

    <% end %>

    sleep(10)

    <% if channels.include? 'play' %>

    kolibri(
      stage: "publish",
      message: "Publish app to Google Play as a Beta...",
    )

    supply(track: 'beta')

    kolibri(
      stage: "publish",
      message: "Application beta is published to Google Play",
      code: 1
    )
  end

  <% end %>

  after_all do |lane|
    slack(message: "Kolibri pipelane was successfully executed")
    update_fastlane
  end

  error do |lane, exception|

    error = %{Something goes wrong...
      #{exception.message}
    }

    kolibri(
      stage: lane.to_s,
      message: error,
      code: -1
    )

    slack(message: exception.message, success: false)
  end
end


# iOS
platform :ios do
  before_all do
    ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
    ENV["KOLIBRI_URL"] = "https://kolibri.herokuapp.com"
    ENV["KOLIBRI_PROJECT"] = "<%= app.internal_id %>"

    ENV["MATCH_GIT_BRANCH"] = "<%= app.ios_config['publishing_profile'] || 'master' %>"
    ENV["MATCH_GIT_URL"] = "git@bitbucket.org:yanova/kolibri-certs.git"
    ENV["MATCH_TYPE"] = "appstore"
    ENV["MATCH_APP_IDENTIFIER"] = "<%= app.ios_config['bundle_id'] %>"
    ENV["MATCH_USERNAME"] = "<%= Rails.configuration.cockpit['publishing_profiles'][app.ios_config['publishing_profile']] %>"
  end

  desc "Kolibri Pipeline (build, test and publish)"
  lane :all do

    kolibri(
      stage: "initialize",
      message: "Setup provisioning and certificates before we go...",
    )

    keychain_entry = CredentialsManager::AccountManager.new(user: ENV['MATCH_USERNAME'] || '')

    produce(
      app_name: "<%= app.internal_name %>",
      app_identifier: "<%= app.ios_config['bundle_id'] %>",
      username:keychain_entry.user
    )

    match(
      type: "appstore",
      username: keychain_entry.user,
      app_identifier: "<%= app.ios_config['bundle_id'] %>",
    )

    build
    test
    publish
  end

  desc "Runs all the tests"
  lane :test do
    kolibri(
      stage: "test",
      message: "Running all the tests..."
    )

    scan(
      device: 'iPhone 6',
      scheme: "KolibriTests",
      clean: true
    )

    kolibri(
      stage: "test",
      message: "All tests passed.",
      code: 1
    )
  end

  desc "Build the project"
  lane :build do

    kolibri(
      stage: "build",
      message: "Building project..."
    )

    gym

    kolibri(
      stage: "build",
      message: "Build successful",
      code: 1
    )
  end

  desc "Publish the app"
  lane :publish do

    <% if channels.include? 'appstore' %>

    kolibri(
      stage: "publish",
      message: "Publish app TestFlight",
    )

    pilot(skip_waiting_for_build_processing: true)

    kolibri(
      stage: "publish",
      message: "Application beta is published to TestFlight",
      code: 1
    )

    <% end %>
  end

  after_all do |lane|
    slack(message: "Kolibri pipelane was successfully executed")
    update_fastlane
  end

  error do |lane, exception|

    error = %{Something goes wrong...
      #{exception.message}
    }

    kolibri(
      stage: lane.to_s,
      message: error,
      code: -1
    )

    slack(message: exception.message, success: false)
  end
end
